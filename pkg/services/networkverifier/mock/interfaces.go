// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/services/networkverifier/networkverifier.go

// Package mock_networkverifier is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/openshift-online/ocm-sdk-go/clustersmgmt/v1"
	v10 "github.com/openshift/hive/apis/hive/v1"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AddNote mocks base method.
func (m *MockService) AddNote(incidentID, noteContent string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNote", incidentID, noteContent)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNote indicates an expected call of AddNote.
func (mr *MockServiceMockRecorder) AddNote(incidentID, noteContent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNote", reflect.TypeOf((*MockService)(nil).AddNote), incidentID, noteContent)
}

// GetClusterDeployment mocks base method.
func (m *MockService) GetClusterDeployment(clusterID string) (*v10.ClusterDeployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterDeployment", clusterID)
	ret0, _ := ret[0].(*v10.ClusterDeployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterDeployment indicates an expected call of GetClusterDeployment.
func (mr *MockServiceMockRecorder) GetClusterDeployment(clusterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterDeployment", reflect.TypeOf((*MockService)(nil).GetClusterDeployment), clusterID)
}

// GetClusterInfo mocks base method.
func (m *MockService) GetClusterInfo(identifier string) (*v1.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterInfo", identifier)
	ret0, _ := ret[0].(*v1.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterInfo indicates an expected call of GetClusterInfo.
func (mr *MockServiceMockRecorder) GetClusterInfo(identifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterInfo", reflect.TypeOf((*MockService)(nil).GetClusterInfo), identifier)
}

// GetEscalationPolicy mocks base method.
func (m *MockService) GetEscalationPolicy() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEscalationPolicy")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetEscalationPolicy indicates an expected call of GetEscalationPolicy.
func (mr *MockServiceMockRecorder) GetEscalationPolicy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEscalationPolicy", reflect.TypeOf((*MockService)(nil).GetEscalationPolicy))
}

// GetSecurityGroupId mocks base method.
func (m *MockService) GetSecurityGroupId(infraID string) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecurityGroupId", infraID)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecurityGroupId indicates an expected call of GetSecurityGroupId.
func (mr *MockServiceMockRecorder) GetSecurityGroupId(infraID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecurityGroupId", reflect.TypeOf((*MockService)(nil).GetSecurityGroupId), infraID)
}

// GetSilentPolicy mocks base method.
func (m *MockService) GetSilentPolicy() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSilentPolicy")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSilentPolicy indicates an expected call of GetSilentPolicy.
func (mr *MockServiceMockRecorder) GetSilentPolicy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSilentPolicy", reflect.TypeOf((*MockService)(nil).GetSilentPolicy))
}

// MoveToEscalationPolicy mocks base method.
func (m *MockService) MoveToEscalationPolicy(incidentID, escalationPolicyID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveToEscalationPolicy", incidentID, escalationPolicyID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MoveToEscalationPolicy indicates an expected call of MoveToEscalationPolicy.
func (mr *MockServiceMockRecorder) MoveToEscalationPolicy(incidentID, escalationPolicyID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveToEscalationPolicy", reflect.TypeOf((*MockService)(nil).MoveToEscalationPolicy), incidentID, escalationPolicyID)
}
